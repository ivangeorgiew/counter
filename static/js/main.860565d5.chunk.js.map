{"version":3,"sources":["errorHandling.js","index.js"],"names":["getErrorHandling","isProduction","process","notifyUser","alert","loggingService","console","info","createFunc","createMethods","initUncaughtErrorHandling","Counter","React","memo","useState","count","setCount","delay","setDelay","useMemo","handleOnChange","e","target","value","handleOnClick","createEffects","id","setTimeout","clearTimeout","useEffect","type","onChange","onClick","rootElement","document","getElementById","ReactDOM","render"],"mappings":"iMAMIA,GAAiB,CACjBC,aAAcC,aACdC,WAAYC,MACZC,eAAgBC,QAAQC,OANxBC,E,EAAAA,WACAC,E,EAAAA,eCCJC,E,EDAIA,6BCEJ,IAAMC,EAAUC,IAAMC,KAAKL,EACvB,uBACA,WAAO,IAAD,EACwBM,mBAAS,GADjC,mBACKC,EADL,KACYC,EADZ,OAEwBF,mBAAS,KAFjC,mBAEKG,EAFL,KAEYC,EAFZ,OAIwCC,mBAAQ,kBAAMV,EAAc,CAClEW,eAAgB,SAACC,GACbH,EAASG,EAAEC,OAAOC,QAEtBC,cAAe,WACXR,EAAS,QAEb,CAACA,EAAUE,IAPPE,EAJN,EAIMA,eAAgBI,EAJtB,EAIsBA,cASlBC,EAAgBN,mBAAQ,kBAAMX,EAChC,sBACA,WACI,IAAMkB,EAAKC,WAAWnB,EAClB,qBACA,WAAQQ,EAASD,EAAQ,MAC1BE,GAEH,OAAO,kBAAMW,aAAaF,SAE/B,CAACX,EAAOE,IAKX,OAFAY,qBAAU,kBAAMJ,MAAiB,CAACA,IAG9B,oCACI,wCAAcV,GACd,wCAEI,2BAAOe,KAAK,OAAOP,MAAON,EAAOc,SAAUX,KAE/C,4BAAQY,QAASR,GAAjB,aAIZ,kBAAM,0DAGJS,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC1B,EAAD,MAAasB,I","file":"static/js/main.860565d5.chunk.js","sourcesContent":["import getErrorHandling from 'pure-error-handling'\n\nexport const {\n    createFunc,\n    createMethods,\n    initUncaughtErrorHandling\n} = getErrorHandling({\n    isProduction: process.env.NODE_ENV,\n    notifyUser: alert,\n    loggingService: console.info\n})\n","import React, { useState, useEffect, useMemo } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { createFunc, createMethods, initUncaughtErrorHandling } from './errorHandling'\n\ninitUncaughtErrorHandling()\n\nconst Counter = React.memo(createFunc(\n    'Showing the counter',\n    () => {\n        const [count, setCount] = useState(0)\n        const [delay, setDelay] = useState(1000)\n\n        const { handleOnChange, handleOnClick } = useMemo(() => createMethods({\n            handleOnChange: (e) => {\n                setDelay(e.target.value)\n            },\n            handleOnClick: () => {\n                setCount(0)\n            }\n        }), [setCount, setDelay])\n\n        const createEffects = useMemo(() => createFunc(\n            'Using side effects',\n            () => {\n                const id = setTimeout(createFunc(\n                    'Ticking the timer',\n                    () => { setCount(count + 1) }\n                ), delay)\n\n                return () => clearTimeout(id)\n            }\n        ), [count, delay])\n\n        // Set up the interval.\n        useEffect(() => createEffects(), [createEffects])\n\n        return (\n            <>\n                <h1>Counter: {count}</h1>\n                <label>\n                    Delay:\n                    <input type=\"text\" value={delay} onChange={handleOnChange} />\n                </label>\n                <button onClick={handleOnClick}>Reset</button>\n            </>\n        )\n    },\n    () => <h1>Error with the counter</h1>\n))\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<Counter />, rootElement)\n"],"sourceRoot":""}