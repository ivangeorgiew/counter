{"version":3,"sources":["index.js"],"names":["createData","getErrorHandling","onError","userMsg","prodMsg","alert","process","NODE_ENV","console","info","React","useState","useEffect","useMemo","render","ReactDOM","Counter","props","count","delay","handleOnChange","handleOnClick","type","value","onChange","onClick","CounterContainer","setCount","setDelay","e","target","tickTheTimer","id","setTimeout","clearTimeout","rootElement","document","getElementById"],"mappings":"yNAKQA,EAAeC,IAAiB,CACpCC,QAAS,YAA2B,IAAD,IAAvBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAEjBC,MAAMF,GAEyB,gBAApB,QAAP,EAAAG,SAAA,kKAAcC,WAEdC,QAAQC,KAAKL,MAPjBJ,W,EAciCA,EAAW,QAASU,KAArDC,E,EAAAA,SAAUC,E,EAAAA,UAAWC,E,EAAAA,QACrBC,EAAWd,EAAW,WAAYe,KAAlCD,OAEFE,EAAUhB,EACZ,uBACA,WAAiB,IAAhBiB,EAAe,uDAAP,GAAO,EACwBA,EAA5BC,aADI,MACI,EADJ,IACwBD,EAAjBE,aADP,MACe,IADf,EAEJC,EAAkCH,EAAlCG,eAAgBC,EAAkBJ,EAAlBI,cAExB,OACI,oCACI,wCAAcH,GACd,wCAEI,2BAAOI,KAAK,OAAOC,MAAOJ,EAAOK,SAAUJ,KAE/C,4BAAQK,QAASJ,GAAjB,aAIZ,kBAAM,yDAGJK,EAAmB1B,EACrB,qBACA,WAAO,IAAD,EACwBW,EAAS,GADjC,mBACKO,EADL,KACYS,EADZ,OAEwBhB,EAAS,KAFjC,mBAEKQ,EAFL,KAEYS,EAFZ,OAIsCf,GACpC,kBAAMb,EAAW,iBAAkB,CAC/B,SAAC6B,GAAQD,EAASC,EAAEC,OAAOP,QAC3B,WAAQI,EAAS,QAErB,CAACA,EAAUC,IATb,mBAIKR,EAJL,KAIqBC,EAJrB,KAwBF,OAXAT,GAAU,WACN,IAAMmB,EAAe/B,EACjB,qBACA,WAAQ2B,EAAST,EAAQ,MAGvBc,EAAKC,WAAWF,EAAcZ,GAEpC,OAAO,kBAAMe,aAAaF,MAC3B,CAACd,EAAOC,IAGP,kBAACH,EAAY,CAAEE,QAAOC,QAAOC,iBAAgBC,qBAGrD,kBAAM,kBAACL,EAAD,SAGJmB,EAAcC,SAASC,eAAe,QAC5CvB,EAAO,kBAACY,EAAD,MAAsBS,I","file":"static/js/main.e6743de1.chunk.js","sourcesContent":["import './index.css'\nimport getErrorHandling from 'tied-pants'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst { createData } = getErrorHandling({\n    onError: ({ userMsg, prodMsg }) => {\n        //TODO change with actual notifications\n        alert(userMsg)\n\n        if (process?.env?.NODE_ENV === 'production') {\n            //TODO change with actual logging in production\n            console.info(prodMsg)\n        }\n    }\n})\n\n// doesn't affect performance\n// dont create React as a whole, or it will double the parsing of jsx\nconst { useState, useEffect, useMemo } = createData('React', React)\nconst { render } = createData('ReactDOM', ReactDOM)\n\nconst Counter = createData(\n    'Showing the counter',\n    (props = {}) => {\n        const { count = 0, delay = 1000 } = props\n        const { handleOnChange, handleOnClick } = props\n\n        return (\n            <>\n                <h1>Counter: {count}</h1>\n                <label>\n                    Delay:\n                    <input type=\"text\" value={delay} onChange={handleOnChange} />\n                </label>\n                <button onClick={handleOnClick}>Reset</button>\n            </>\n        )\n    },\n    () => <h1>Error with the counter</h1>\n)\n\nconst CounterContainer = createData(\n    'Using the counter',\n    () => {\n        const [count, setCount] = useState(0)\n        const [delay, setDelay] = useState(1000)\n\n        const [handleOnChange, handleOnClick] = useMemo(\n            () => createData('Event handlers', [\n                (e) => { setDelay(e.target.value) },\n                () => { setCount(0) }\n            ]),\n            [setCount, setDelay]\n        )\n\n        // Set up the interval.\n        useEffect(() => {\n            const tickTheTimer = createData(\n                'Ticking the timer',\n                () => { setCount(count + 1) }\n            )\n\n            const id = setTimeout(tickTheTimer, delay)\n\n            return () => clearTimeout(id)\n        }, [count, delay])\n\n        return (\n            <Counter {...{ count, delay, handleOnChange, handleOnClick }} />\n        )\n    },\n    () => <Counter />\n)\n\nconst rootElement = document.getElementById('root')\nrender(<CounterContainer />, rootElement)\n"],"sourceRoot":""}