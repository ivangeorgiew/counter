{"version":3,"sources":["errorHandling.js","Counter.js","CounterContainer.js","index.js"],"names":["getErrorHandling","notify","isDevelopment","isUncaught","isFriendly","userMsg","alert","catchUnhandled","impureData","pureFunc","Counter","count","delay","handleOnClick","handleOnChange","readOnly","type","value","onChange","onClick","getEventHandlers","setDelay","setCount","e","target","directionEffects","setShouldAdd","timerEffects","shouldAdd","id","setTimeout","clearTimeout","CounterContainer","useState","handlers","useEffect","rootElement","document","getElementById","render"],"mappings":"uNAEwDA,GAAiB,CACrEC,OAAQ,YAAyD,IAAtDC,EAAqD,EAArDA,cAAeC,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,QACzCH,IACGC,EAAYG,MAAM,WAAD,OAAYD,IACxBD,GAAYE,MAAM,aAAD,OAAcD,QAJrCE,E,EAAAA,eAAgBC,E,EAAAA,WAAYC,E,EAAAA,S,OCC9BC,EAAUD,EACnB,qBACA,YAA0D,IAAD,IAAtDE,aAAsD,MAA9C,EAA8C,EAA3CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,eAC1BC,EAAqC,oBAAnBD,EAExB,OACI,oCACI,wCAAcH,GACd,wCAEI,2BACIK,KAAK,OACLD,SAAUA,EACVE,MAAOL,EACPM,SAAUJ,KAGlB,4BAAQK,QAASN,GAAjB,aAIZ,kBAAM,2DCpBJO,EAAmBX,EACrB,0BACA,gBAAGY,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAb,OAA4Bd,EAAW,6BAA8B,CACjEM,eAAgB,SAACS,GAAQF,EAASE,EAAEC,OAAOP,QAC3CJ,cAAe,WAAQS,EAAS,SAEpC,iBAAO,MAGLG,EAAmBhB,EACrB,6BACA,gBAAGE,EAAH,EAAGA,MAAOe,EAAV,EAAUA,aAAV,OAA6BlB,EACzB,yCACA,WACkB,IAAVG,GACAe,GAAa,GACH,MAAVf,GACAe,GAAa,SAGzB,kBAAM,gBAGJC,EAAelB,EACjB,yBACA,gBAAGG,EAAH,EAAGA,MAAOgB,EAAV,EAAUA,UAAWN,EAArB,EAAqBA,SAArB,OAAoCd,EAChC,uBACA,WACI,IAAMqB,EAAKC,WAAWtB,EAClB,qBACA,WAEQc,EADAM,EACS,SAAAjB,GAAK,OAAIA,EAAQ,GAEjB,SAAAA,GAAK,OAAIA,EAAQ,OAEnCC,GAEH,OAAO,kBAAMmB,aAAaF,UAGlC,kBAAM,gBAGGG,EAAmBxB,EAC5B,iBACA,WAAO,IAAD,EACwByB,mBAAS,GADjC,mBACKtB,EADL,KACYW,EADZ,OAEwBW,mBAAS,IAFjC,mBAEKrB,EAFL,KAEYS,EAFZ,OAGgCY,oBAAS,GAHzC,mBAGKL,EAHL,KAGgBF,EAHhB,KAIIQ,EAAWd,EAAiB,CAAEC,WAAUC,aAK9C,OAHAa,oBAAUV,EAAiB,CAAEd,QAAOe,kBACpCS,oBAAUR,EAAa,CAAEf,QAAOgB,YAAWN,cAEpC,kBAACZ,EAAD,eAASC,MAAOA,EAAOC,MAAOA,GAAWsB,OAEpD,kBAAM,kBAACxB,EAAD,SCvDVH,IAEA,IAAM6B,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,kBAACP,EAAD,MAAsBI,K","file":"static/js/main.d9520db1.chunk.js","sourcesContent":["import getErrorHandling from 'tied-pants'\n\nexport const { catchUnhandled, impureData, pureFunc } = getErrorHandling({\n    notify: ({ isDevelopment, isUncaught, isFriendly, userMsg }) => {\n        if (!isDevelopment) {\n            if (isUncaught) alert(`ERROR - ${userMsg}`)\n            else if (isFriendly) alert(`WARNING - ${userMsg}`)\n        }\n    }\n})\n","import React from 'react'\nimport { pureFunc } from './errorHandling'\n\nexport const Counter = pureFunc(\n    'rendering Counter',\n    ({ count = 0, delay, handleOnClick, handleOnChange }) => {\n        const readOnly = typeof handleOnChange !== 'function'\n\n        return (\n            <>\n                <h1>Counter: {count}</h1>\n                <label>\n                    Delay:\n                    <input\n                        type=\"text\"\n                        readOnly={readOnly}\n                        value={delay}\n                        onChange={handleOnChange}\n                    />\n                </label>\n                <button onClick={handleOnClick}>Reset</button>\n            </>\n        )\n    },\n    () => <h1>Error with the component</h1>\n)\n","import React, { useState, useEffect } from 'react'\nimport { pureFunc, impureData } from './errorHandling'\nimport { Counter } from './Counter'\n\nconst getEventHandlers = pureFunc(\n    'getting event handlers',\n    ({ setDelay, setCount }) => impureData('event handlers for Counter', {\n        handleOnChange: (e) => { setDelay(e.target.value) },\n        handleOnClick: () => { setCount(0) }\n    }),\n    () => ({})\n)\n\nconst directionEffects = pureFunc(\n    'getting direction effects',\n    ({ count, setShouldAdd }) => impureData(\n        'changing the direction of the counter',\n        () => {\n            if (count === 0)\n                setShouldAdd(true)\n            if (count === 100)\n                setShouldAdd(false)\n        }\n    ),\n    () => () => {}\n)\n\nconst timerEffects = pureFunc(\n    'getting timer effects',\n    ({ delay, shouldAdd, setCount }) => impureData(\n        'ticking the counter',\n        () => {\n            const id = setTimeout(impureData(\n                'Ticking the timer',\n                () => {\n                    if (shouldAdd)\n                        setCount(count => count + 1)\n                    else\n                        setCount(count => count - 1)\n                }\n            ), delay)\n\n            return () => clearTimeout(id)\n        }\n    ),\n    () => () => {}\n)\n\nexport const CounterContainer = impureData(\n    'using counter',\n    () => {\n        const [count, setCount] = useState(0)\n        const [delay, setDelay] = useState(10)\n        const [shouldAdd, setShouldAdd] = useState(true)\n        const handlers = getEventHandlers({ setDelay, setCount })\n\n        useEffect(directionEffects({ count, setShouldAdd }))\n        useEffect(timerEffects({ delay, shouldAdd, setCount }))\n\n        return <Counter count={count} delay={delay} {...handlers} />\n    },\n    () => <Counter />\n)\n","import React from 'react'\nimport { render } from 'react-dom'\nimport './index.css'\nimport { catchUnhandled } from './errorHandling'\nimport { CounterContainer } from './CounterContainer'\n\ncatchUnhandled()\n\nconst rootElement = document.getElementById('root')\nrender(<CounterContainer />, rootElement)\n"],"sourceRoot":""}